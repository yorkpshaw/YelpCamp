1. Install dependencies and packages
    -Database, backend server, middleware, frontend
2. Get server connected to database
    -Middleware
    -Seed database?
3. Set up routes between backend and database
    -Create models
    -CRUD Functionality
    -show a specific item should be placed near the end, otherwise certain things may never get seen
    -Index page
    -method override
4. Basic layout
    -Boilerplate
    -Bootstrap/Tailwind/Etc.
    -Navbar
    -Footer
5. Error handling
    -utils folder for custom error handling, keeps app file cleaner
        -expressError creates custom error objects with an associated status code
        -catchAsync so we don't have to keep writing try/catch
    -'require' in the js files
    -Express error classes
    -
6. JOI
    -Validate data with JOI
    -middleware validation
    -NOT Mongoose Schema
    -Use this to validate incoming requests
    -Validate ---> Call next ---> (if error, display error template) ---> if no error, post
7. MongoDB
    -Mongoose middleware can help delete an item and all things associated with it
    -pre/post middleware. pre runs before the query. post middleware has access to data being queried
    -${in} deletes all products associated with something else under findoneanddelete
    -Do not forgot to update the models when updating schema!


Back-End Initialization:
    npm init -y
    npm i express mongoose ejs
    app.js/index.js in root server directory
    app.listen & app.get to test communication
    nodemon app.js to start the server
    set up path and connection to views folder

    create models folder for database schemas
    command to enter Mongo shell is 'Mongosh'

    get the models to populate in a list

    npm i method-override

    app.use will override everything

    npm i ejs-mate

    npm i joi
